package layout;

public interface IGUILayoutNode {
	
	public enum FlexDirection {
		ROW,
		COLUMN,
		ROW_REVERSE,
		COLUMN_REVERSE
	}
	
	public enum Direction {
		LEFT, TOP, RIGHT, BOTTOM, START, END, HORIZONTAL, VERTICAL, ALL
	}
	
	public enum Alignment {
		AUTO, CENTER, BASELINE, FLEX_END, FLEX_START, SPACE_AROUND, SPACE_BETWEEN, STRETCH
	}
	
	
	/**
	 * 
	 * @return Returns this node's parent node. 
	 */
	public IGUILayoutNode getParent();
	
	
	/**
	 * 
	 * Sets the node's parent node.
	 * 
	 * @param node The parent node.
	 */
	public void setChild(IGUILayoutNode node);
	
	
	/**
	 * 
	 * Removes a child node from this node.
	 * 
	 * @param node The child node to remove.
	 */
	public void removeChild(IGUILayoutNode node);
	
	
	/**
	 * Removes all children from this node.
	 */
	public void removeAllChildren();
	
	
	/**
	 * 
	 * Explicitely defines the node's x local coordinate relative to its parent node. 
	 * This will override the coordinate generated by the current layout.
	 * 
	 * @param x The x coordinate relative to its parent node.
	 */
	public void setLocalXCoordinate(int x);
	
	
	/**
	 * 
	 * Explicitely defines the node's x local coordinate relative to its parent node. 
	 * This will override the coordinate generated by the current layout.
	 * 
	 * In this case the coordinate is measured in percent of the parent's width.
	 * 
	 * @param x The x coordinate relative to its parent node.
	 */
	public void setLocalXCoordinate(float percent);
	

	/**
	 * 
	 * @return Returns the node's x coordinate relative to its parent node.
	 */
	public int getLocalXCoordinate();
	
	
	/**
	 * TODO: Do we actually need this?
	 * 
	 * @param x
	 */
	public void setGlobalXCoordinate(int x);
	
	
	/**
	 * 
	 * @return Returns the node's global x coordinate.
	 */
	public int getGlobalXCoordinate();
	
	
	/**
	 * Explicitely defines the node's y local coordinate relative to its parent node. 
	 * This will override the coordinate generated by the current layout.
	 * 
	 * @param y The y coordinate relative to its parent node.
	 */
	public void setLocalYCoordinate(int y);
	
	
	/**
	 * 
	 * Explicitely defines the node's y local coordinate relative to its parent node. 
	 * This will override the coordinate generated by the current layout.
	 * 
	 * In this case the coordinate is measured in percent of the parent's height.
	 * 
	 * @param y The y coordinate relative to its parent node.
	 */
	public void setLocalYCoordinate(float percent);
	
	
	/**
	 * 
	 * @return Returns the node's y coordinate relative to its parent node.
	 */
	public int getLocalYCoordinate();
	
	
	/**
	 * TODO: Do we actually need this?
	 * 
	 * @param y
	 */
	public void setGlobalYCoordinate(int y);
	
	
	/**
	 * 
	 * @return Returns the node's global y coordinate.
	 */
	public int getGlobalYCoordinate();
	
	
	/**
	 * 
	 * @param width The width of the element in pixels.
	 */
	public void setWidth(int width);
	
	
	/**
	 * 
	 * @param percent The width of the element in relation to the parent.
	 */
	public void setWidth(float percent);

	
	/**
	 * 
	 * @return Returns the width of the element.
	 */
	public int getWidth();
	
	
	/**
	 * 
	 * @param height The height of the element in pixels.
	 */
	public void setHeight(int height);
	
	
	/**
	 * 
	 * @param percent The height of the element in relation to the parent.
	 */
	public void setHeight(float percent);
	
	
	/**
	 * 
	 * @return Returns the height of the element as it was calculated by Yoga.
	 */
	public int getHeight();
	
	
	/**
	 * 
	 * Sets the minimum distance to be maintained to all other nodes with the 
	 * same parent node in the specified direction.
	 * 
	 * @param direction The direction.
	 * @param margin The margin in pixel.
	 */
	public void setMargin(Direction direction, int margin);
	
	
	/**
	 * 
	 * Sets the minimum distance to be maintained to all other nodes with the 
	 * same parent node in the specified direction.
	 * 
	 * @param direction The direction.
	 * @param margin The margin in percent of the parent node's width/height.
	 */
	public void setMargin(Direction direction, float margin);
	
	
	/**
	 * 
	 * Sets the minimum distance that all child nodes have to maintain to this
	 * node's edges in the specified direction.
	 *  
	 * @param direction The direction.
	 * @param padding The margin in pixel.
	 */
	public void setPadding(Direction dir, int padding);
	
	
	/**
	 * 
	 * Sets the minimum distance that all child notes have to maintain to this
	 * node's edges in the specified direction.
	 *  
	 * @param direction The direction.
	 * @param padding The margin in percent of the parent node's width/height.
	 */
	public void setPadding(Direction dir, float percent);
	
	
	/**
	 * 
	 * Defines the layout in which the child nodes are arranged.
	 * 
	 * @param align The alignment.
	 */
	public void setAlignment(Alignment align);
	
	
	/**
	 * 
	 * @param direction Specifies the layout of this Container.
	 */
	public void setFlexDirection(FlexDirection direction);
	
	
	/**
	 * 
	 * @return Returns this node's FlexDirection.
	 */
	public FlexDirection getFlexDirection();
	
}
