package elements;

import assets.textures.Texture2D;
import elements.containers.GUIContainerElement;
import gui_core.GUIManager;
import gui_core.GUIMatrixManager;
import math.matrices.Matrix33f;
import math.matrices.advanced.MatrixInversion33f;
import math.vectors.Vector4f;
import rendering.shapes.GUIShape;

public abstract class GUIElement implements Clickable {
	
	//The id of this element. The id is generated by the GUIManager and assigned to the element
	private final int ID;
	
	//The parent of this element
	private GUIContainerElement parent;
	
	//The dimensions of this element
	private float x, y, width, height;
	
	//The attributes of this element
	private boolean visible, resizable, movable, closeable;
	
	//The shape of this element
	private GUIShape shape;
	
	//The transformation matrix of this element
	private Matrix33f renderingMatrix;
	
	//The inverted transformation matrix
	private Matrix33f invertedRenderingMatrix;
	
	//The texture for rendering this element
	private Texture2D texture;
	
	//The color for rendering this element
	private Vector4f color;
	
	//Have there been any changes to this elements position and size?
	private boolean changed;
		
		
	
	private GUIElement(GUIShape shape, Texture2D texture, Vector4f color, float x, float y, float width, float height) {
		
		//If the GUIManager isn't initialized yet, do it now.
		if (!GUIManager.isInitialized()) {
			GUIManager.init();
		}
		
		this.ID = GUIManager.generateID();
		
		this.renderingMatrix = GUIMatrixManager.generateRenderingMatrix(x, y, width, height);
		this.invertedRenderingMatrix = MatrixInversion33f.generateMultiplicativeInverse(renderingMatrix);
		
		this.changed = true;
		
		this.shape = shape;
		this.texture = texture;
		this.color = color;
		
		this.resizable = false;
		this.visible = true;
		this.movable = false;
		this.closeable = true;
		
	}

	
	public GUIElement(GUIShape shape, Texture2D texture, float x, float y, float width, float height) {
		
		this(shape, texture, null, x, y, width, height);
		
	}
	
	
	public GUIElement(GUIShape shape, Vector4f color, float x, float y, float width, float height) {
		
		this(shape, null, color, x, y, width, height);
		
	}
	
	
	public void render() {
		
		if (!visible) {
			return;
		}
		
		shape.render(texture, color, renderingMatrix);
	}
	
	
	public void update() {
		
		if (changed) {
			this.renderingMatrix = GUIMatrixManager.generateRenderingMatrix(x, y, width, height);
			
			changed = false;
			
		}
		
		this.renderingMatrix = parent.getRenderingMatrix().times(renderingMatrix);
		this.invertedRenderingMatrix = MatrixInversion33f.generateMultiplicativeInverse(renderingMatrix);
		
	}
	
	
	public abstract boolean processInput(float cursorX, float cursorY, boolean leftMouseButtonDown, boolean rightMouseButtonDown);
	
	
	public void resize(float width, float height) {
		
		if (!resizable) {
			return;
		}
		
		this.width = width;
		
		this.height = height;
		
		changed = true;
		
	}
	
	
	public void reposition(float x, float y) {
		
		if (!movable) {
			return;
		}
		
		this.x = x;
		
		this.y = y;
		
		changed = false;
		
	}
	

	public void setParent(GUIContainerElement element) {
		this.parent = element;
	}
	
	
	public boolean isVisible() {
		return visible;
	}


	public void setVisible(boolean visible) {
		this.visible = visible;
	}


	public boolean isResizable() {
		return resizable;
	}


	public void setResizable(boolean resizable) {
		this.resizable = resizable;
	}


	public boolean isMovable() {
		return movable;
	}


	public void setMovable(boolean movable) {
		this.movable = movable;
	}


	public boolean isCloseable() {
		return closeable;
	}


	public void setCloseable(boolean closeable) {
		this.closeable = closeable;
	}
	
	
	public GUIShape getShape() {
		return shape;
	}


	public float getX() {
		return x;
	}


	public float getY() {
		return y;
	}


	public float getWidth() {
		return width;
	}


	public float getHeight() {
		return height;
	}
	
	
	public Matrix33f getRenderingMatrix() {
		return renderingMatrix;
	}
	
	
	public Matrix33f getInvertedRenderingMatrix() {
		return invertedRenderingMatrix;
	}
	
	public void delete() {		
		parent.remove(this);
		
		onClose();
	}

}
